---
alwaysApply: true
description: 블로그 프로젝트 구조 및 파일 관리 규칙
---

# 블로그 프로젝트 구조 가이드

이 규칙은 블로그 프로젝트의 구조와 파일 관리에 대한 가이드입니다.

## 📁 프로젝트 구조

```
git_blog/
├── css/
│   ├── style.css          # 메인 스타일시트
│   └── prism.css          # 코드 하이라이팅 스타일
├── js/
│   ├── app.js             # 메인 애플리케이션 로직
│   ├── post-loader.js     # 게시글 로딩 및 Giscus 설정
│   ├── search.js          # 검색 기능
│   └── theme.js           # 다크/라이트 모드 전환
├── pages/                 # 마크다운 게시글 저장소
│   ├── example.md         # 예시 게시글
│   └── us-economy-october-2025.md
├── docs/                  # 프로젝트 문서
│   ├── plan.md            # 프로젝트 계획서
│   └── discus_setup.md    # Giscus 설정 가이드
├── index.html             # 메인 페이지
├── post.html              # 게시글 상세 페이지
└── posts.json             # 게시글 메타데이터
```

## 🎯 핵심 파일 역할

### HTML 파일
- [index.html](mdc:index.html): 메인 페이지, 게시글 목록 표시
- [post.html](mdc:post.html): 개별 게시글 상세 페이지, Giscus 댓글 포함

### JavaScript 파일
- [js/app.js](mdc:js/app.js): 게시글 목록 로딩 및 렌더링
- [js/post-loader.js](mdc:js/post-loader.js): 게시글 상세 로딩, 마크다운 파싱, Giscus 설정
- [js/search.js](mdc:js/search.js): 실시간 검색 및 필터링
- [js/theme.js](mdc:js/theme.js): 다크/라이트 모드 전환

### CSS 파일
- [css/style.css](mdc:css/style.css): 전체 스타일링, CSS 변수 기반 테마 시스템
- [css/prism.css](mdc:css/prism.css): 코드 하이라이팅 스타일

## 📝 게시글 관리

### 새 게시글 추가
1. `pages/` 폴더에 `.md` 파일 생성
2. Front Matter에 메타데이터 작성
3. 마크다운으로 내용 작성
4. `posts.json` 업데이트 (자동화 가능)

### 게시글 양식
모든 게시글은 다음 구조를 따라야 합니다:

```markdown
---
title: '제목'
date: YYYY-MM-DD
tags: ['태그1', '태그2']
category: '카테고리'
description: '설명'
---

# 제목

내용...
```

## 🔧 Giscus 댓글 시스템

### 설정 정보
- 저장소: `piwalla/piwalla.github.io`
- Repo ID: `R_kgDOQLHJng`
- Category ID: `DIC_kwDOQLHJns4CxMbq`
- 언어: 한국어 (`ko`)
- 테마: 자동 전환 (`preferred_color_scheme`)

### 구현 위치
- [post.html](mdc:post.html): HTML에 직접 스크립트 삽입
- [js/post-loader.js](mdc:js/post-loader.js): 동적 로딩 로직

## 🎨 스타일링 시스템

### CSS 변수 기반 테마
- 라이트/다크 모드 자동 전환
- `--bg-primary`, `--text-primary` 등 의미있는 변수명 사용
- 모든 색상과 스타일이 변수로 관리됨

### 반응형 디자인
- 모바일 우선 설계
- `@media` 쿼리로 다양한 화면 크기 지원
- 그리드 레이아웃으로 유연한 카드 배치

## 🔍 검색 및 필터링

### 기능
- 실시간 검색 (제목, 내용, 태그)
- 태그별 필터링
- 카테고리별 필터링
- 검색 결과 하이라이팅

### 구현
- [js/search.js](mdc:js/search.js)에서 모든 검색 로직 처리
- `posts.json`에서 메타데이터 로딩
- URL 파라미터로 필터 상태 유지

## 📱 사용자 경험

### 접근성
- 키보드 네비게이션 지원
- 스크린 리더 호환
- 의미있는 HTML 구조

### 성능
- 정적 파일 기반으로 빠른 로딩
- 이미지 최적화
- 코드 분할 및 지연 로딩

## 🚀 배포 및 관리

### GitHub Pages
- `main` 브랜치에 푸시하면 자동 배포
- 커스텀 도메인 설정 가능
- HTTPS 자동 적용

### 버전 관리
- 모든 변경사항은 git으로 추적
- 의미있는 커밋 메시지 사용
- 기능별 브랜치 활용

## ⚠️ 주의사항

1. **파일명**: 게시글 파일명은 영어로 작성 (URL 친화적)
2. **이미지**: 외부 CDN 사용 권장 (GitHub Pages 용량 제한)
3. **SEO**: Front Matter의 description 필드 활용
4. **성능**: 큰 이미지나 비디오는 최적화 후 사용
5. **보안**: 사용자 입력 검증 및 XSS 방지